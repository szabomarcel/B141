// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do one of these:
//
//    using iranyitoszam;
//
//    var postaCode = PostaCode.FromJson(jsonString);
//    var album = Album.FromJson(jsonString);
//    var track = Track.FromJson(jsonString);

namespace iranyitoszam
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PostaCode
    {
        [JsonProperty("post code", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? PostCode { get; set; }

        [JsonProperty("country", NullValueHandling = NullValueHandling.Ignore)]
        public string Country { get; set; }

        [JsonProperty("country abbreviation", NullValueHandling = NullValueHandling.Ignore)]
        public string CountryAbbreviation { get; set; }

        [JsonProperty("places", NullValueHandling = NullValueHandling.Ignore)]
        public Place[] Places { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("founded", NullValueHandling = NullValueHandling.Ignore)]
        public long? Founded { get; set; }

        [JsonProperty("members", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Members { get; set; }
    }

    public partial class Place
    {
        [JsonProperty("place name")]
        public string PlaceName { get; set; }

        [JsonProperty("longitude")]
        public string Longitude { get; set; }

        [JsonProperty("state")]
        public string State { get; set; }

        [JsonProperty("state abbreviation")]
        public string StateAbbreviation { get; set; }

        [JsonProperty("latitude")]
        public string Latitude { get; set; }
    }

    public partial class Album
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("artist")]
        public Artist Artist { get; set; }

        [JsonProperty("tracks")]
        public Track[] Tracks { get; set; }
    }

    public partial class Artist
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("founded")]
        public long Founded { get; set; }

        [JsonProperty("members")]
        public string[] Members { get; set; }
    }

    public partial class Track
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("duration")]
        public long Duration { get; set; }
    }

    public partial class PostaCode
    {
        public static PostaCode FromJson(string json) => JsonConvert.DeserializeObject<PostaCode>(json, iranyitoszam.Converter.Settings);
    }

    public partial class Album
    {
        public static Album FromJson(string json) => JsonConvert.DeserializeObject<Album>(json, iranyitoszam.Converter.Settings);
    }

    public partial class Track
    {
        public static Track FromJson(string json) => JsonConvert.DeserializeObject<Track>(json, iranyitoszam.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PostaCode self) => JsonConvert.SerializeObject(self, iranyitoszam.Converter.Settings);
        public static string ToJson(this Album self) => JsonConvert.SerializeObject(self, iranyitoszam.Converter.Settings);
        public static string ToJson(this Track self) => JsonConvert.SerializeObject(self, iranyitoszam.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
